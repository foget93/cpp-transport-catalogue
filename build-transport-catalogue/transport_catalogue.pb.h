// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "map_renderer.pb.h"
#include "transport_router.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace transport_catalogue_serialize {
class Bus;
struct BusDefaultTypeInternal;
extern BusDefaultTypeInternal _Bus_default_instance_;
class BusStopData;
struct BusStopDataDefaultTypeInternal;
extern BusStopDataDefaultTypeInternal _BusStopData_default_instance_;
class Coordinates;
struct CoordinatesDefaultTypeInternal;
extern CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
class Distance;
struct DistanceDefaultTypeInternal;
extern DistanceDefaultTypeInternal _Distance_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class TransportCatalogue;
struct TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace transport_catalogue_serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::transport_catalogue_serialize::Bus* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Bus>(Arena*);
template<> ::transport_catalogue_serialize::BusStopData* Arena::CreateMaybeMessage<::transport_catalogue_serialize::BusStopData>(Arena*);
template<> ::transport_catalogue_serialize::Coordinates* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Coordinates>(Arena*);
template<> ::transport_catalogue_serialize::Distance* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Distance>(Arena*);
template<> ::transport_catalogue_serialize::Stop* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Stop>(Arena*);
template<> ::transport_catalogue_serialize::TransportCatalogue* Arena::CreateMaybeMessage<::transport_catalogue_serialize::TransportCatalogue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace transport_catalogue_serialize {

enum Bus_BusType : int {
  Bus_BusType_CIRCULAR = 0,
  Bus_BusType_DIRECT = 1,
  Bus_BusType_Bus_BusType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Bus_BusType_Bus_BusType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Bus_BusType_IsValid(int value);
constexpr Bus_BusType Bus_BusType_BusType_MIN = Bus_BusType_CIRCULAR;
constexpr Bus_BusType Bus_BusType_BusType_MAX = Bus_BusType_DIRECT;
constexpr int Bus_BusType_BusType_ARRAYSIZE = Bus_BusType_BusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bus_BusType_descriptor();
template<typename T>
inline const std::string& Bus_BusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bus_BusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bus_BusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bus_BusType_descriptor(), enum_t_value);
}
inline bool Bus_BusType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bus_BusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bus_BusType>(
    Bus_BusType_descriptor(), name, value);
}
// ===================================================================

class Coordinates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Coordinates) */ {
 public:
  inline Coordinates() : Coordinates(nullptr) {}
  ~Coordinates() override;
  explicit PROTOBUF_CONSTEXPR Coordinates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coordinates(const Coordinates& from);
  Coordinates(Coordinates&& from) noexcept
    : Coordinates() {
    *this = ::std::move(from);
  }

  inline Coordinates& operator=(const Coordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinates& operator=(Coordinates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coordinates& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coordinates* internal_default_instance() {
    return reinterpret_cast<const Coordinates*>(
               &_Coordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Coordinates& a, Coordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coordinates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coordinates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Coordinates& from) {
    Coordinates::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Coordinates";
  }
  protected:
  explicit Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLngFieldNumber = 2,
  };
  // double lat = 1;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lng = 2;
  void clear_lng();
  double lng() const;
  void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Coordinates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double lat_;
    double lng_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Stop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  ~Stop() override;
  explicit PROTOBUF_CONSTEXPR Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stop& from) {
    Stop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kCoordinatesFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .transport_catalogue_serialize.Coordinates coordinates = 3;
  bool has_coordinates() const;
  private:
  bool _internal_has_coordinates() const;
  public:
  void clear_coordinates();
  const ::transport_catalogue_serialize::Coordinates& coordinates() const;
  PROTOBUF_NODISCARD ::transport_catalogue_serialize::Coordinates* release_coordinates();
  ::transport_catalogue_serialize::Coordinates* mutable_coordinates();
  void set_allocated_coordinates(::transport_catalogue_serialize::Coordinates* coordinates);
  private:
  const ::transport_catalogue_serialize::Coordinates& _internal_coordinates() const;
  ::transport_catalogue_serialize::Coordinates* _internal_mutable_coordinates();
  public:
  void unsafe_arena_set_allocated_coordinates(
      ::transport_catalogue_serialize::Coordinates* coordinates);
  ::transport_catalogue_serialize::Coordinates* unsafe_arena_release_coordinates();

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::transport_catalogue_serialize::Coordinates* coordinates_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Bus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Bus) */ {
 public:
  inline Bus() : Bus(nullptr) {}
  ~Bus() override;
  explicit PROTOBUF_CONSTEXPR Bus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bus(const Bus& from);
  Bus(Bus&& from) noexcept
    : Bus() {
    *this = ::std::move(from);
  }

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bus& operator=(Bus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bus& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bus* internal_default_instance() {
    return reinterpret_cast<const Bus*>(
               &_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Bus& a, Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(Bus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bus& from) {
    Bus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Bus";
  }
  protected:
  explicit Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Bus_BusType BusType;
  static constexpr BusType CIRCULAR =
    Bus_BusType_CIRCULAR;
  static constexpr BusType DIRECT =
    Bus_BusType_DIRECT;
  static inline bool BusType_IsValid(int value) {
    return Bus_BusType_IsValid(value);
  }
  static constexpr BusType BusType_MIN =
    Bus_BusType_BusType_MIN;
  static constexpr BusType BusType_MAX =
    Bus_BusType_BusType_MAX;
  static constexpr int BusType_ARRAYSIZE =
    Bus_BusType_BusType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BusType_descriptor() {
    return Bus_BusType_descriptor();
  }
  template<typename T>
  static inline const std::string& BusType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BusType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BusType_Name.");
    return Bus_BusType_Name(enum_t_value);
  }
  static inline bool BusType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BusType* value) {
    return Bus_BusType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStopIdsFieldNumber = 3,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 1,
    kIdFieldNumber = 4,
  };
  // repeated uint32 stop_ids = 3;
  int stop_ids_size() const;
  private:
  int _internal_stop_ids_size() const;
  public:
  void clear_stop_ids();
  private:
  uint32_t _internal_stop_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_stop_ids() const;
  void _internal_add_stop_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_stop_ids();
  public:
  uint32_t stop_ids(int index) const;
  void set_stop_ids(int index, uint32_t value);
  void add_stop_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      stop_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_stop_ids();

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .transport_catalogue_serialize.Bus.BusType type = 1;
  void clear_type();
  ::transport_catalogue_serialize::Bus_BusType type() const;
  void set_type(::transport_catalogue_serialize::Bus_BusType value);
  private:
  ::transport_catalogue_serialize::Bus_BusType _internal_type() const;
  void _internal_set_type(::transport_catalogue_serialize::Bus_BusType value);
  public:

  // uint32 id = 4;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Bus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > stop_ids_;
    mutable std::atomic<int> _stop_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int type_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Distance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Distance) */ {
 public:
  inline Distance() : Distance(nullptr) {}
  ~Distance() override;
  explicit PROTOBUF_CONSTEXPR Distance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Distance(const Distance& from);
  Distance(Distance&& from) noexcept
    : Distance() {
    *this = ::std::move(from);
  }

  inline Distance& operator=(const Distance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Distance& operator=(Distance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Distance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Distance* internal_default_instance() {
    return reinterpret_cast<const Distance*>(
               &_Distance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Distance& a, Distance& b) {
    a.Swap(&b);
  }
  inline void Swap(Distance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Distance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Distance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Distance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Distance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Distance& from) {
    Distance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Distance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Distance";
  }
  protected:
  explicit Distance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromStopIdFieldNumber = 1,
    kToStopIdFieldNumber = 2,
    kDistanceMFieldNumber = 3,
  };
  // uint32 from_stop_id = 1;
  void clear_from_stop_id();
  uint32_t from_stop_id() const;
  void set_from_stop_id(uint32_t value);
  private:
  uint32_t _internal_from_stop_id() const;
  void _internal_set_from_stop_id(uint32_t value);
  public:

  // uint32 to_stop_id = 2;
  void clear_to_stop_id();
  uint32_t to_stop_id() const;
  void set_to_stop_id(uint32_t value);
  private:
  uint32_t _internal_to_stop_id() const;
  void _internal_set_to_stop_id(uint32_t value);
  public:

  // uint32 distance_m = 3;
  void clear_distance_m();
  uint32_t distance_m() const;
  void set_distance_m(uint32_t value);
  private:
  uint32_t _internal_distance_m() const;
  void _internal_set_distance_m(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Distance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t from_stop_id_;
    uint32_t to_stop_id_;
    uint32_t distance_m_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class BusStopData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.BusStopData) */ {
 public:
  inline BusStopData() : BusStopData(nullptr) {}
  ~BusStopData() override;
  explicit PROTOBUF_CONSTEXPR BusStopData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BusStopData(const BusStopData& from);
  BusStopData(BusStopData&& from) noexcept
    : BusStopData() {
    *this = ::std::move(from);
  }

  inline BusStopData& operator=(const BusStopData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusStopData& operator=(BusStopData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BusStopData& default_instance() {
    return *internal_default_instance();
  }
  static inline const BusStopData* internal_default_instance() {
    return reinterpret_cast<const BusStopData*>(
               &_BusStopData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BusStopData& a, BusStopData& b) {
    a.Swap(&b);
  }
  inline void Swap(BusStopData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusStopData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BusStopData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BusStopData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BusStopData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BusStopData& from) {
    BusStopData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusStopData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.BusStopData";
  }
  protected:
  explicit BusStopData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 1,
    kBusesFieldNumber = 2,
    kDistancesFieldNumber = 3,
  };
  // repeated .transport_catalogue_serialize.Stop stops = 1;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::transport_catalogue_serialize::Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop >*
      mutable_stops();
  private:
  const ::transport_catalogue_serialize::Stop& _internal_stops(int index) const;
  ::transport_catalogue_serialize::Stop* _internal_add_stops();
  public:
  const ::transport_catalogue_serialize::Stop& stops(int index) const;
  ::transport_catalogue_serialize::Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop >&
      stops() const;

  // repeated .transport_catalogue_serialize.Bus buses = 2;
  int buses_size() const;
  private:
  int _internal_buses_size() const;
  public:
  void clear_buses();
  ::transport_catalogue_serialize::Bus* mutable_buses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Bus >*
      mutable_buses();
  private:
  const ::transport_catalogue_serialize::Bus& _internal_buses(int index) const;
  ::transport_catalogue_serialize::Bus* _internal_add_buses();
  public:
  const ::transport_catalogue_serialize::Bus& buses(int index) const;
  ::transport_catalogue_serialize::Bus* add_buses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Bus >&
      buses() const;

  // repeated .transport_catalogue_serialize.Distance distances = 3;
  int distances_size() const;
  private:
  int _internal_distances_size() const;
  public:
  void clear_distances();
  ::transport_catalogue_serialize::Distance* mutable_distances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Distance >*
      mutable_distances();
  private:
  const ::transport_catalogue_serialize::Distance& _internal_distances(int index) const;
  ::transport_catalogue_serialize::Distance* _internal_add_distances();
  public:
  const ::transport_catalogue_serialize::Distance& distances(int index) const;
  ::transport_catalogue_serialize::Distance* add_distances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Distance >&
      distances() const;

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.BusStopData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop > stops_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Bus > buses_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Distance > distances_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalogue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {}
  ~TransportCatalogue() override;
  explicit PROTOBUF_CONSTEXPR TransportCatalogue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportCatalogue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportCatalogue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportCatalogue& from) {
    TransportCatalogue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusStopDataFieldNumber = 1,
    kSettingsFieldNumber = 2,
    kRouterFieldNumber = 3,
  };
  // .transport_catalogue_serialize.BusStopData bus_stop_data = 1;
  bool has_bus_stop_data() const;
  private:
  bool _internal_has_bus_stop_data() const;
  public:
  void clear_bus_stop_data();
  const ::transport_catalogue_serialize::BusStopData& bus_stop_data() const;
  PROTOBUF_NODISCARD ::transport_catalogue_serialize::BusStopData* release_bus_stop_data();
  ::transport_catalogue_serialize::BusStopData* mutable_bus_stop_data();
  void set_allocated_bus_stop_data(::transport_catalogue_serialize::BusStopData* bus_stop_data);
  private:
  const ::transport_catalogue_serialize::BusStopData& _internal_bus_stop_data() const;
  ::transport_catalogue_serialize::BusStopData* _internal_mutable_bus_stop_data();
  public:
  void unsafe_arena_set_allocated_bus_stop_data(
      ::transport_catalogue_serialize::BusStopData* bus_stop_data);
  ::transport_catalogue_serialize::BusStopData* unsafe_arena_release_bus_stop_data();

  // .transport_catalogue_serialize.RenderSettings settings = 2;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::transport_catalogue_serialize::RenderSettings& settings() const;
  PROTOBUF_NODISCARD ::transport_catalogue_serialize::RenderSettings* release_settings();
  ::transport_catalogue_serialize::RenderSettings* mutable_settings();
  void set_allocated_settings(::transport_catalogue_serialize::RenderSettings* settings);
  private:
  const ::transport_catalogue_serialize::RenderSettings& _internal_settings() const;
  ::transport_catalogue_serialize::RenderSettings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::transport_catalogue_serialize::RenderSettings* settings);
  ::transport_catalogue_serialize::RenderSettings* unsafe_arena_release_settings();

  // .transport_catalogue_serialize.TransportRouter router = 3;
  bool has_router() const;
  private:
  bool _internal_has_router() const;
  public:
  void clear_router();
  const ::transport_catalogue_serialize::TransportRouter& router() const;
  PROTOBUF_NODISCARD ::transport_catalogue_serialize::TransportRouter* release_router();
  ::transport_catalogue_serialize::TransportRouter* mutable_router();
  void set_allocated_router(::transport_catalogue_serialize::TransportRouter* router);
  private:
  const ::transport_catalogue_serialize::TransportRouter& _internal_router() const;
  ::transport_catalogue_serialize::TransportRouter* _internal_mutable_router();
  public:
  void unsafe_arena_set_allocated_router(
      ::transport_catalogue_serialize::TransportRouter* router);
  ::transport_catalogue_serialize::TransportRouter* unsafe_arena_release_router();

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::transport_catalogue_serialize::BusStopData* bus_stop_data_;
    ::transport_catalogue_serialize::RenderSettings* settings_;
    ::transport_catalogue_serialize::TransportRouter* router_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coordinates

// double lat = 1;
inline void Coordinates::clear_lat() {
  _impl_.lat_ = 0;
}
inline double Coordinates::_internal_lat() const {
  return _impl_.lat_;
}
inline double Coordinates::lat() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Coordinates.lat)
  return _internal_lat();
}
inline void Coordinates::_internal_set_lat(double value) {
  
  _impl_.lat_ = value;
}
inline void Coordinates::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Coordinates.lat)
}

// double lng = 2;
inline void Coordinates::clear_lng() {
  _impl_.lng_ = 0;
}
inline double Coordinates::_internal_lng() const {
  return _impl_.lng_;
}
inline double Coordinates::lng() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Coordinates.lng)
  return _internal_lng();
}
inline void Coordinates::_internal_set_lng(double value) {
  
  _impl_.lng_ = value;
}
inline void Coordinates::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Coordinates.lng)
}

// -------------------------------------------------------------------

// Stop

// uint32 id = 1;
inline void Stop::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Stop::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Stop::id() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Stop.id)
  return _internal_id();
}
inline void Stop::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Stop::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Stop.id)
}

// string name = 2;
inline void Stop::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Stop::name() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Stop.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stop::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Stop.name)
}
inline std::string* Stop::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Stop.name)
  return _s;
}
inline const std::string& Stop::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Stop::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Stop::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Stop::release_name() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.Stop.name)
  return _impl_.name_.Release();
}
inline void Stop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.Stop.name)
}

// .transport_catalogue_serialize.Coordinates coordinates = 3;
inline bool Stop::_internal_has_coordinates() const {
  return this != internal_default_instance() && _impl_.coordinates_ != nullptr;
}
inline bool Stop::has_coordinates() const {
  return _internal_has_coordinates();
}
inline void Stop::clear_coordinates() {
  if (GetArenaForAllocation() == nullptr && _impl_.coordinates_ != nullptr) {
    delete _impl_.coordinates_;
  }
  _impl_.coordinates_ = nullptr;
}
inline const ::transport_catalogue_serialize::Coordinates& Stop::_internal_coordinates() const {
  const ::transport_catalogue_serialize::Coordinates* p = _impl_.coordinates_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_serialize::Coordinates&>(
      ::transport_catalogue_serialize::_Coordinates_default_instance_);
}
inline const ::transport_catalogue_serialize::Coordinates& Stop::coordinates() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Stop.coordinates)
  return _internal_coordinates();
}
inline void Stop::unsafe_arena_set_allocated_coordinates(
    ::transport_catalogue_serialize::Coordinates* coordinates) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coordinates_);
  }
  _impl_.coordinates_ = coordinates;
  if (coordinates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_serialize.Stop.coordinates)
}
inline ::transport_catalogue_serialize::Coordinates* Stop::release_coordinates() {
  
  ::transport_catalogue_serialize::Coordinates* temp = _impl_.coordinates_;
  _impl_.coordinates_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_serialize::Coordinates* Stop::unsafe_arena_release_coordinates() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.Stop.coordinates)
  
  ::transport_catalogue_serialize::Coordinates* temp = _impl_.coordinates_;
  _impl_.coordinates_ = nullptr;
  return temp;
}
inline ::transport_catalogue_serialize::Coordinates* Stop::_internal_mutable_coordinates() {
  
  if (_impl_.coordinates_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_serialize::Coordinates>(GetArenaForAllocation());
    _impl_.coordinates_ = p;
  }
  return _impl_.coordinates_;
}
inline ::transport_catalogue_serialize::Coordinates* Stop::mutable_coordinates() {
  ::transport_catalogue_serialize::Coordinates* _msg = _internal_mutable_coordinates();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Stop.coordinates)
  return _msg;
}
inline void Stop::set_allocated_coordinates(::transport_catalogue_serialize::Coordinates* coordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.coordinates_;
  }
  if (coordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(coordinates);
    if (message_arena != submessage_arena) {
      coordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinates, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.coordinates_ = coordinates;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.Stop.coordinates)
}

// -------------------------------------------------------------------

// Bus

// .transport_catalogue_serialize.Bus.BusType type = 1;
inline void Bus::clear_type() {
  _impl_.type_ = 0;
}
inline ::transport_catalogue_serialize::Bus_BusType Bus::_internal_type() const {
  return static_cast< ::transport_catalogue_serialize::Bus_BusType >(_impl_.type_);
}
inline ::transport_catalogue_serialize::Bus_BusType Bus::type() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Bus.type)
  return _internal_type();
}
inline void Bus::_internal_set_type(::transport_catalogue_serialize::Bus_BusType value) {
  
  _impl_.type_ = value;
}
inline void Bus::set_type(::transport_catalogue_serialize::Bus_BusType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Bus.type)
}

// string name = 2;
inline void Bus::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Bus::name() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Bus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bus::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Bus.name)
}
inline std::string* Bus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Bus.name)
  return _s;
}
inline const std::string& Bus::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Bus::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Bus::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Bus::release_name() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.Bus.name)
  return _impl_.name_.Release();
}
inline void Bus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.Bus.name)
}

// repeated uint32 stop_ids = 3;
inline int Bus::_internal_stop_ids_size() const {
  return _impl_.stop_ids_.size();
}
inline int Bus::stop_ids_size() const {
  return _internal_stop_ids_size();
}
inline void Bus::clear_stop_ids() {
  _impl_.stop_ids_.Clear();
}
inline uint32_t Bus::_internal_stop_ids(int index) const {
  return _impl_.stop_ids_.Get(index);
}
inline uint32_t Bus::stop_ids(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Bus.stop_ids)
  return _internal_stop_ids(index);
}
inline void Bus::set_stop_ids(int index, uint32_t value) {
  _impl_.stop_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Bus.stop_ids)
}
inline void Bus::_internal_add_stop_ids(uint32_t value) {
  _impl_.stop_ids_.Add(value);
}
inline void Bus::add_stop_ids(uint32_t value) {
  _internal_add_stop_ids(value);
  // @@protoc_insertion_point(field_add:transport_catalogue_serialize.Bus.stop_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Bus::_internal_stop_ids() const {
  return _impl_.stop_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Bus::stop_ids() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_serialize.Bus.stop_ids)
  return _internal_stop_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Bus::_internal_mutable_stop_ids() {
  return &_impl_.stop_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Bus::mutable_stop_ids() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_serialize.Bus.stop_ids)
  return _internal_mutable_stop_ids();
}

// uint32 id = 4;
inline void Bus::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Bus::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Bus::id() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Bus.id)
  return _internal_id();
}
inline void Bus::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Bus::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Bus.id)
}

// -------------------------------------------------------------------

// Distance

// uint32 from_stop_id = 1;
inline void Distance::clear_from_stop_id() {
  _impl_.from_stop_id_ = 0u;
}
inline uint32_t Distance::_internal_from_stop_id() const {
  return _impl_.from_stop_id_;
}
inline uint32_t Distance::from_stop_id() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Distance.from_stop_id)
  return _internal_from_stop_id();
}
inline void Distance::_internal_set_from_stop_id(uint32_t value) {
  
  _impl_.from_stop_id_ = value;
}
inline void Distance::set_from_stop_id(uint32_t value) {
  _internal_set_from_stop_id(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Distance.from_stop_id)
}

// uint32 to_stop_id = 2;
inline void Distance::clear_to_stop_id() {
  _impl_.to_stop_id_ = 0u;
}
inline uint32_t Distance::_internal_to_stop_id() const {
  return _impl_.to_stop_id_;
}
inline uint32_t Distance::to_stop_id() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Distance.to_stop_id)
  return _internal_to_stop_id();
}
inline void Distance::_internal_set_to_stop_id(uint32_t value) {
  
  _impl_.to_stop_id_ = value;
}
inline void Distance::set_to_stop_id(uint32_t value) {
  _internal_set_to_stop_id(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Distance.to_stop_id)
}

// uint32 distance_m = 3;
inline void Distance::clear_distance_m() {
  _impl_.distance_m_ = 0u;
}
inline uint32_t Distance::_internal_distance_m() const {
  return _impl_.distance_m_;
}
inline uint32_t Distance::distance_m() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Distance.distance_m)
  return _internal_distance_m();
}
inline void Distance::_internal_set_distance_m(uint32_t value) {
  
  _impl_.distance_m_ = value;
}
inline void Distance::set_distance_m(uint32_t value) {
  _internal_set_distance_m(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Distance.distance_m)
}

// -------------------------------------------------------------------

// BusStopData

// repeated .transport_catalogue_serialize.Stop stops = 1;
inline int BusStopData::_internal_stops_size() const {
  return _impl_.stops_.size();
}
inline int BusStopData::stops_size() const {
  return _internal_stops_size();
}
inline void BusStopData::clear_stops() {
  _impl_.stops_.Clear();
}
inline ::transport_catalogue_serialize::Stop* BusStopData::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.BusStopData.stops)
  return _impl_.stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop >*
BusStopData::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_serialize.BusStopData.stops)
  return &_impl_.stops_;
}
inline const ::transport_catalogue_serialize::Stop& BusStopData::_internal_stops(int index) const {
  return _impl_.stops_.Get(index);
}
inline const ::transport_catalogue_serialize::Stop& BusStopData::stops(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.BusStopData.stops)
  return _internal_stops(index);
}
inline ::transport_catalogue_serialize::Stop* BusStopData::_internal_add_stops() {
  return _impl_.stops_.Add();
}
inline ::transport_catalogue_serialize::Stop* BusStopData::add_stops() {
  ::transport_catalogue_serialize::Stop* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:transport_catalogue_serialize.BusStopData.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop >&
BusStopData::stops() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_serialize.BusStopData.stops)
  return _impl_.stops_;
}

// repeated .transport_catalogue_serialize.Bus buses = 2;
inline int BusStopData::_internal_buses_size() const {
  return _impl_.buses_.size();
}
inline int BusStopData::buses_size() const {
  return _internal_buses_size();
}
inline void BusStopData::clear_buses() {
  _impl_.buses_.Clear();
}
inline ::transport_catalogue_serialize::Bus* BusStopData::mutable_buses(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.BusStopData.buses)
  return _impl_.buses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Bus >*
BusStopData::mutable_buses() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_serialize.BusStopData.buses)
  return &_impl_.buses_;
}
inline const ::transport_catalogue_serialize::Bus& BusStopData::_internal_buses(int index) const {
  return _impl_.buses_.Get(index);
}
inline const ::transport_catalogue_serialize::Bus& BusStopData::buses(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.BusStopData.buses)
  return _internal_buses(index);
}
inline ::transport_catalogue_serialize::Bus* BusStopData::_internal_add_buses() {
  return _impl_.buses_.Add();
}
inline ::transport_catalogue_serialize::Bus* BusStopData::add_buses() {
  ::transport_catalogue_serialize::Bus* _add = _internal_add_buses();
  // @@protoc_insertion_point(field_add:transport_catalogue_serialize.BusStopData.buses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Bus >&
BusStopData::buses() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_serialize.BusStopData.buses)
  return _impl_.buses_;
}

// repeated .transport_catalogue_serialize.Distance distances = 3;
inline int BusStopData::_internal_distances_size() const {
  return _impl_.distances_.size();
}
inline int BusStopData::distances_size() const {
  return _internal_distances_size();
}
inline void BusStopData::clear_distances() {
  _impl_.distances_.Clear();
}
inline ::transport_catalogue_serialize::Distance* BusStopData::mutable_distances(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.BusStopData.distances)
  return _impl_.distances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Distance >*
BusStopData::mutable_distances() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_serialize.BusStopData.distances)
  return &_impl_.distances_;
}
inline const ::transport_catalogue_serialize::Distance& BusStopData::_internal_distances(int index) const {
  return _impl_.distances_.Get(index);
}
inline const ::transport_catalogue_serialize::Distance& BusStopData::distances(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.BusStopData.distances)
  return _internal_distances(index);
}
inline ::transport_catalogue_serialize::Distance* BusStopData::_internal_add_distances() {
  return _impl_.distances_.Add();
}
inline ::transport_catalogue_serialize::Distance* BusStopData::add_distances() {
  ::transport_catalogue_serialize::Distance* _add = _internal_add_distances();
  // @@protoc_insertion_point(field_add:transport_catalogue_serialize.BusStopData.distances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Distance >&
BusStopData::distances() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_serialize.BusStopData.distances)
  return _impl_.distances_;
}

// -------------------------------------------------------------------

// TransportCatalogue

// .transport_catalogue_serialize.BusStopData bus_stop_data = 1;
inline bool TransportCatalogue::_internal_has_bus_stop_data() const {
  return this != internal_default_instance() && _impl_.bus_stop_data_ != nullptr;
}
inline bool TransportCatalogue::has_bus_stop_data() const {
  return _internal_has_bus_stop_data();
}
inline void TransportCatalogue::clear_bus_stop_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.bus_stop_data_ != nullptr) {
    delete _impl_.bus_stop_data_;
  }
  _impl_.bus_stop_data_ = nullptr;
}
inline const ::transport_catalogue_serialize::BusStopData& TransportCatalogue::_internal_bus_stop_data() const {
  const ::transport_catalogue_serialize::BusStopData* p = _impl_.bus_stop_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_serialize::BusStopData&>(
      ::transport_catalogue_serialize::_BusStopData_default_instance_);
}
inline const ::transport_catalogue_serialize::BusStopData& TransportCatalogue::bus_stop_data() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.TransportCatalogue.bus_stop_data)
  return _internal_bus_stop_data();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_bus_stop_data(
    ::transport_catalogue_serialize::BusStopData* bus_stop_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bus_stop_data_);
  }
  _impl_.bus_stop_data_ = bus_stop_data;
  if (bus_stop_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_serialize.TransportCatalogue.bus_stop_data)
}
inline ::transport_catalogue_serialize::BusStopData* TransportCatalogue::release_bus_stop_data() {
  
  ::transport_catalogue_serialize::BusStopData* temp = _impl_.bus_stop_data_;
  _impl_.bus_stop_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_serialize::BusStopData* TransportCatalogue::unsafe_arena_release_bus_stop_data() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.TransportCatalogue.bus_stop_data)
  
  ::transport_catalogue_serialize::BusStopData* temp = _impl_.bus_stop_data_;
  _impl_.bus_stop_data_ = nullptr;
  return temp;
}
inline ::transport_catalogue_serialize::BusStopData* TransportCatalogue::_internal_mutable_bus_stop_data() {
  
  if (_impl_.bus_stop_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_serialize::BusStopData>(GetArenaForAllocation());
    _impl_.bus_stop_data_ = p;
  }
  return _impl_.bus_stop_data_;
}
inline ::transport_catalogue_serialize::BusStopData* TransportCatalogue::mutable_bus_stop_data() {
  ::transport_catalogue_serialize::BusStopData* _msg = _internal_mutable_bus_stop_data();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.TransportCatalogue.bus_stop_data)
  return _msg;
}
inline void TransportCatalogue::set_allocated_bus_stop_data(::transport_catalogue_serialize::BusStopData* bus_stop_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bus_stop_data_;
  }
  if (bus_stop_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bus_stop_data);
    if (message_arena != submessage_arena) {
      bus_stop_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bus_stop_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bus_stop_data_ = bus_stop_data;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.TransportCatalogue.bus_stop_data)
}

// .transport_catalogue_serialize.RenderSettings settings = 2;
inline bool TransportCatalogue::_internal_has_settings() const {
  return this != internal_default_instance() && _impl_.settings_ != nullptr;
}
inline bool TransportCatalogue::has_settings() const {
  return _internal_has_settings();
}
inline const ::transport_catalogue_serialize::RenderSettings& TransportCatalogue::_internal_settings() const {
  const ::transport_catalogue_serialize::RenderSettings* p = _impl_.settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_serialize::RenderSettings&>(
      ::transport_catalogue_serialize::_RenderSettings_default_instance_);
}
inline const ::transport_catalogue_serialize::RenderSettings& TransportCatalogue::settings() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.TransportCatalogue.settings)
  return _internal_settings();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_settings(
    ::transport_catalogue_serialize::RenderSettings* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settings_);
  }
  _impl_.settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_serialize.TransportCatalogue.settings)
}
inline ::transport_catalogue_serialize::RenderSettings* TransportCatalogue::release_settings() {
  
  ::transport_catalogue_serialize::RenderSettings* temp = _impl_.settings_;
  _impl_.settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_serialize::RenderSettings* TransportCatalogue::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.TransportCatalogue.settings)
  
  ::transport_catalogue_serialize::RenderSettings* temp = _impl_.settings_;
  _impl_.settings_ = nullptr;
  return temp;
}
inline ::transport_catalogue_serialize::RenderSettings* TransportCatalogue::_internal_mutable_settings() {
  
  if (_impl_.settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_serialize::RenderSettings>(GetArenaForAllocation());
    _impl_.settings_ = p;
  }
  return _impl_.settings_;
}
inline ::transport_catalogue_serialize::RenderSettings* TransportCatalogue::mutable_settings() {
  ::transport_catalogue_serialize::RenderSettings* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.TransportCatalogue.settings)
  return _msg;
}
inline void TransportCatalogue::set_allocated_settings(::transport_catalogue_serialize::RenderSettings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settings_);
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings));
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.TransportCatalogue.settings)
}

// .transport_catalogue_serialize.TransportRouter router = 3;
inline bool TransportCatalogue::_internal_has_router() const {
  return this != internal_default_instance() && _impl_.router_ != nullptr;
}
inline bool TransportCatalogue::has_router() const {
  return _internal_has_router();
}
inline const ::transport_catalogue_serialize::TransportRouter& TransportCatalogue::_internal_router() const {
  const ::transport_catalogue_serialize::TransportRouter* p = _impl_.router_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_serialize::TransportRouter&>(
      ::transport_catalogue_serialize::_TransportRouter_default_instance_);
}
inline const ::transport_catalogue_serialize::TransportRouter& TransportCatalogue::router() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.TransportCatalogue.router)
  return _internal_router();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_router(
    ::transport_catalogue_serialize::TransportRouter* router) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.router_);
  }
  _impl_.router_ = router;
  if (router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_serialize.TransportCatalogue.router)
}
inline ::transport_catalogue_serialize::TransportRouter* TransportCatalogue::release_router() {
  
  ::transport_catalogue_serialize::TransportRouter* temp = _impl_.router_;
  _impl_.router_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_serialize::TransportRouter* TransportCatalogue::unsafe_arena_release_router() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.TransportCatalogue.router)
  
  ::transport_catalogue_serialize::TransportRouter* temp = _impl_.router_;
  _impl_.router_ = nullptr;
  return temp;
}
inline ::transport_catalogue_serialize::TransportRouter* TransportCatalogue::_internal_mutable_router() {
  
  if (_impl_.router_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_serialize::TransportRouter>(GetArenaForAllocation());
    _impl_.router_ = p;
  }
  return _impl_.router_;
}
inline ::transport_catalogue_serialize::TransportRouter* TransportCatalogue::mutable_router() {
  ::transport_catalogue_serialize::TransportRouter* _msg = _internal_mutable_router();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.TransportCatalogue.router)
  return _msg;
}
inline void TransportCatalogue::set_allocated_router(::transport_catalogue_serialize::TransportRouter* router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.router_);
  }
  if (router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router));
    if (message_arena != submessage_arena) {
      router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.router_ = router;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.TransportCatalogue.router)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transport_catalogue_serialize

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::transport_catalogue_serialize::Bus_BusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::transport_catalogue_serialize::Bus_BusType>() {
  return ::transport_catalogue_serialize::Bus_BusType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
